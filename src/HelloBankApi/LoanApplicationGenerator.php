<?php

namespace Somrlik\HelloBankApi;

use Http\Discovery\StreamFactoryDiscovery;
use Nette\InvalidArgumentException;
use Nette\InvalidStateException;
use Nette\Utils\Strings;
use Psr\Http\Message\RequestFactoryInterface;

class LoanApplicationGenerator {

    /** @var HelloBankApi */
    private $api;

    /** @var RequestFactoryInterface */
    private $requestFactory;

    /**
     * @param HelloBankApi            $api
     * @param RequestFactoryInterface $requestFactory
     */
    public function __construct(HelloBankApi $api, $requestFactory) {
        $this->api = $api;
        $this->requestFactory = $requestFactory;
    }

    /**
     * The response generated by this function should be send by browser or as a redirect
     *
     * @param LoanCalculator $loanCalculator
     * @param                $backUrlOk
     * @param                $backUrlKo
     * @param int            $orderNumber
     * @param int            $clientNumber
     * @param bool           $shipping
     * @param bool           $allowRecalculation
     * @return \Psr\Http\Message\RequestInterface
     */
    public function generateRequestFromCalculator(
        LoanCalculator $loanCalculator,
        $backUrlOk,
        $backUrlKo,
        $orderNumber = 0,
        $clientNumber = 0,
        $shipping = false,
        $allowRecalculation = true
    ) {
        $url = self::getUrlForEnvironment($this->api->getEnvironment());

        $response = $loanCalculator->resolve();

        $dataToExtractFromResponse = [
            'kodBaremu',
            'kodPojisteni',
            'cenaZbozi',
            'primaPlatba',
            'vyseUveru',
            'pocetSplatek',
            'odklad',
            'vyseSplatky',
            'cenaUveru',
            'ursaz',
            'RPSN',
        ];

        $data = [];
        foreach ($dataToExtractFromResponse as $toExtract) {
            $data[$toExtract] = $response[$toExtract];
        }

        if (Strings::length($backUrlOk) > 50) {
            throw new InvalidArgumentException('backUrlOk cannot be longer than 50 characters.');
        } else if (! empty($backUrlOk)) {
            $data['url_back_ok'] = $backUrlOk;
        }

        if (Strings::length($backUrlKo) > 50) {
            throw new InvalidArgumentException('backUrlKo cannot be longer than 50 characters.');
        } else if (! empty($backUrlKo)) {
            $data['url_back_ko'] = $backUrlKo;
        }

        if ($orderNumber !== 0) {
            $data['obj'] = $orderNumber;
        }

        if ($clientNumber !== 0) {
            $data['numklient'] = $clientNumber;
        }

        if ($shipping !== false) {
            $data['doprava'] = 1;
        }

        if ($allowRecalculation !== false) {
            $data['recalc'] = 1;
        }

        $request = $this->requestFactory->createRequest('POST', $url);
        $request = $request->withBody(StreamFactoryDiscovery::find()->createStream(
            http_build_query($data)
        ));

        return $request;
    }

    /**
     * @param string $environment
     * @return mixed
     */
    private static function getUrlForEnvironment(string $environment) {
        $mapping = [
            HelloBankApi::ENVIRONMENT_TEST =>
                'https://www.cetelem.cz:8654/cetelem2_webshop.php/zadost-o-pujcku/on-line-zadost-o-pujcku',
            HelloBankApi::ENVIRONMENT_PRODUCTION =>
                'https://www.cetelem.cz/cetelem2_webshop.php/zadost-o-pujcku/on-line-zadost-o-pujcku',
        ];

        if (array_key_exists($environment, $mapping)) {
            return $mapping[$environment];
        }

        throw new InvalidStateException('Cannot get loan application for environment ' . $environment);
    }

}
